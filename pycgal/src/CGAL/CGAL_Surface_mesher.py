# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_CGAL_Surface_mesher')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_CGAL_Surface_mesher')
    _CGAL_Surface_mesher = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CGAL_Surface_mesher', [dirname(__file__)])
        except ImportError:
            import _CGAL_Surface_mesher
            return _CGAL_Surface_mesher
        try:
            _mod = imp.load_module('_CGAL_Surface_mesher', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _CGAL_Surface_mesher = swig_import_helper()
    del swig_import_helper
else:
    import _CGAL_Surface_mesher
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

import CGAL.CGAL_Kernel
import CGAL.CGAL_Polyhedron_3
VERTEX = _CGAL_Surface_mesher.VERTEX
EDGE = _CGAL_Surface_mesher.EDGE
FACET = _CGAL_Surface_mesher.FACET
CELL = _CGAL_Surface_mesher.CELL
OUTSIDE_CONVEX_HULL = _CGAL_Surface_mesher.OUTSIDE_CONVEX_HULL
OUTSIDE_AFFINE_HULL = _CGAL_Surface_mesher.OUTSIDE_AFFINE_HULL
NOT_IN_COMPLEX = _CGAL_Surface_mesher.NOT_IN_COMPLEX
ISOLATED = _CGAL_Surface_mesher.ISOLATED
BOUNDARY = _CGAL_Surface_mesher.BOUNDARY
REGULAR = _CGAL_Surface_mesher.REGULAR
SINGULAR = _CGAL_Surface_mesher.SINGULAR
MANIFOLD_TAG = _CGAL_Surface_mesher.MANIFOLD_TAG
MANIFOLD_WITH_BOUNDARY_TAG = _CGAL_Surface_mesher.MANIFOLD_WITH_BOUNDARY_TAG
NON_MANIFOLD_TAG = _CGAL_Surface_mesher.NON_MANIFOLD_TAG
class Object(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Object, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Object, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CGAL_Surface_mesher.new_Object()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def is_Point_2(self):
        return _CGAL_Surface_mesher.Object_is_Point_2(self)

    def get_Point_2(self):
        return _CGAL_Surface_mesher.Object_get_Point_2(self)

    def is_Point_3(self):
        return _CGAL_Surface_mesher.Object_is_Point_3(self)

    def get_Point_3(self):
        return _CGAL_Surface_mesher.Object_get_Point_3(self)

    def is_Triangle_2(self):
        return _CGAL_Surface_mesher.Object_is_Triangle_2(self)

    def get_Triangle_2(self):
        return _CGAL_Surface_mesher.Object_get_Triangle_2(self)

    def is_Triangle_3(self):
        return _CGAL_Surface_mesher.Object_is_Triangle_3(self)

    def get_Triangle_3(self):
        return _CGAL_Surface_mesher.Object_get_Triangle_3(self)

    def is_Segment_3(self):
        return _CGAL_Surface_mesher.Object_is_Segment_3(self)

    def get_Segment_3(self):
        return _CGAL_Surface_mesher.Object_get_Segment_3(self)

    def is_Segment_2(self):
        return _CGAL_Surface_mesher.Object_is_Segment_2(self)

    def get_Segment_2(self):
        return _CGAL_Surface_mesher.Object_get_Segment_2(self)

    def is_Line_3(self):
        return _CGAL_Surface_mesher.Object_is_Line_3(self)

    def get_Line_3(self):
        return _CGAL_Surface_mesher.Object_get_Line_3(self)

    def is_Line_2(self):
        return _CGAL_Surface_mesher.Object_is_Line_2(self)

    def get_Line_2(self):
        return _CGAL_Surface_mesher.Object_get_Line_2(self)

    def is_Plane_3(self):
        return _CGAL_Surface_mesher.Object_is_Plane_3(self)

    def get_Plane_3(self):
        return _CGAL_Surface_mesher.Object_get_Plane_3(self)

    def is_Ray_2(self):
        return _CGAL_Surface_mesher.Object_is_Ray_2(self)

    def get_Ray_2(self):
        return _CGAL_Surface_mesher.Object_get_Ray_2(self)

    def is_Ray_3(self):
        return _CGAL_Surface_mesher.Object_is_Ray_3(self)

    def get_Ray_3(self):
        return _CGAL_Surface_mesher.Object_get_Ray_3(self)

    def empty(self):
        return _CGAL_Surface_mesher.Object_empty(self)
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Object
    __del__ = lambda self: None
Object_swigregister = _CGAL_Surface_mesher.Object_swigregister
Object_swigregister(Object)

class Ref_Locate_type_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ref_Locate_type_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ref_Locate_type_3, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CGAL_Surface_mesher.new_Ref_Locate_type_3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, t):
        return _CGAL_Surface_mesher.Ref_Locate_type_3_set(self, t)

    def object(self):
        return _CGAL_Surface_mesher.Ref_Locate_type_3_object(self)

    def deepcopy(self, *args):
        return _CGAL_Surface_mesher.Ref_Locate_type_3_deepcopy(self, *args)
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Ref_Locate_type_3
    __del__ = lambda self: None
Ref_Locate_type_3_swigregister = _CGAL_Surface_mesher.Ref_Locate_type_3_swigregister
Ref_Locate_type_3_swigregister(Ref_Locate_type_3)

class Surface_mesh_default_triangulation_3_Cell_handle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Surface_mesh_default_triangulation_3_Cell_handle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Surface_mesh_default_triangulation_3_Cell_handle, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CGAL_Surface_mesher.new_Surface_mesh_default_triangulation_3_Cell_handle()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def vertex(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_handle_vertex(self, *args)

    def neighbor(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_handle_neighbor(self, *args)

    def index(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_handle_index(self, *args)

    def set_vertex(self, c1, c2):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_handle_set_vertex(self, c1, c2)

    def set_vertices(self, c1, c2, c3, c4):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_handle_set_vertices(self, c1, c2, c3, c4)

    def set_neighbor(self, c1, c2):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_handle_set_neighbor(self, c1, c2)

    def set_neighbors(self, c1, c2, c3, c4):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_handle_set_neighbors(self, c1, c2, c3, c4)

    def is_valid(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_handle_is_valid(self, *args)

    def has_vertex(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_handle_has_vertex(self, *args)

    def has_neighbor(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_handle_has_neighbor(self, *args)

    def __lt__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_handle___lt__(self, p)

    def __gt__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_handle___gt__(self, p)

    def __le__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_handle___le__(self, p)

    def __ge__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_handle___ge__(self, p)

    def __eq__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_handle___eq__(self, p)

    def __ne__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_handle___ne__(self, p)

    def __hash__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_handle___hash__(self)

    def deepcopy(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_handle_deepcopy(self, *args)
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Surface_mesh_default_triangulation_3_Cell_handle
    __del__ = lambda self: None
Surface_mesh_default_triangulation_3_Cell_handle_swigregister = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_handle_swigregister
Surface_mesh_default_triangulation_3_Cell_handle_swigregister(Surface_mesh_default_triangulation_3_Cell_handle)

class Surface_mesh_default_triangulation_3_Vertex_handle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Surface_mesh_default_triangulation_3_Vertex_handle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Surface_mesh_default_triangulation_3_Vertex_handle, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CGAL_Surface_mesher.new_Surface_mesh_default_triangulation_3_Vertex_handle()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def point(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Vertex_handle_point(self, *args)

    def cell(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Vertex_handle_cell(self, *args)

    def set_cell(self, c):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Vertex_handle_set_cell(self, c)

    def set_point(self, c):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Vertex_handle_set_point(self, c)

    def is_valid(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Vertex_handle_is_valid(self, *args)

    def __lt__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Vertex_handle___lt__(self, p)

    def __gt__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Vertex_handle___gt__(self, p)

    def __le__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Vertex_handle___le__(self, p)

    def __ge__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Vertex_handle___ge__(self, p)

    def __eq__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Vertex_handle___eq__(self, p)

    def __ne__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Vertex_handle___ne__(self, p)

    def __hash__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Vertex_handle___hash__(self)

    def deepcopy(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Vertex_handle_deepcopy(self, *args)
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Surface_mesh_default_triangulation_3_Vertex_handle
    __del__ = lambda self: None
Surface_mesh_default_triangulation_3_Vertex_handle_swigregister = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Vertex_handle_swigregister
Surface_mesh_default_triangulation_3_Vertex_handle_swigregister(Surface_mesh_default_triangulation_3_Vertex_handle)

class Surface_mesh_default_triangulation_3_Facet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Surface_mesh_default_triangulation_3_Facet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Surface_mesh_default_triangulation_3_Facet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CGAL_Surface_mesher.new_Surface_mesh_default_triangulation_3_Facet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Facet_first_set
    __swig_getmethods__["first"] = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Facet_first_get
    if _newclass:
        first = _swig_property(_CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Facet_first_get, _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Facet_first_set)
    __swig_setmethods__["second"] = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Facet_second_set
    __swig_getmethods__["second"] = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Facet_second_get
    if _newclass:
        second = _swig_property(_CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Facet_second_get, _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Facet_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Surface_mesh_default_triangulation_3_Facet
    __del__ = lambda self: None
Surface_mesh_default_triangulation_3_Facet_swigregister = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Facet_swigregister
Surface_mesh_default_triangulation_3_Facet_swigregister(Surface_mesh_default_triangulation_3_Facet)

class Surface_mesh_default_triangulation_3_Edge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Surface_mesh_default_triangulation_3_Edge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Surface_mesh_default_triangulation_3_Edge, name)
    __repr__ = _swig_repr
    __swig_setmethods__["first"] = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Edge_first_set
    __swig_getmethods__["first"] = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Edge_first_get
    if _newclass:
        first = _swig_property(_CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Edge_first_get, _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Edge_first_set)
    __swig_setmethods__["second"] = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Edge_second_set
    __swig_getmethods__["second"] = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Edge_second_get
    if _newclass:
        second = _swig_property(_CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Edge_second_get, _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Edge_second_set)
    __swig_setmethods__["third"] = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Edge_third_set
    __swig_getmethods__["third"] = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Edge_third_get
    if _newclass:
        third = _swig_property(_CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Edge_third_get, _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Edge_third_set)

    def __init__(self, *args):
        this = _CGAL_Surface_mesher.new_Surface_mesh_default_triangulation_3_Edge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def deepcopy(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Edge_deepcopy(self, *args)
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Surface_mesh_default_triangulation_3_Edge
    __del__ = lambda self: None
Surface_mesh_default_triangulation_3_Edge_swigregister = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Edge_swigregister
Surface_mesh_default_triangulation_3_Edge_swigregister(Surface_mesh_default_triangulation_3_Edge)

class Internal_Triangulation_3_Surface_mesh_default_triangulation_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Internal_Triangulation_3_Surface_mesh_default_triangulation_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Internal_Triangulation_3_Surface_mesh_default_triangulation_3, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Internal_Triangulation_3_Surface_mesh_default_triangulation_3
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _CGAL_Surface_mesher.new_Internal_Triangulation_3_Surface_mesh_default_triangulation_3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clear(self):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_clear(self)

    def dimension(self):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_dimension(self)

    def number_of_vertices(self):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_number_of_vertices(self)

    def number_of_cells(self):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_number_of_cells(self)

    def infinite_vertex(self, *args):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_infinite_vertex(self, *args)

    def infinite_cell(self, *args):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_infinite_cell(self, *args)

    def number_of_facets(self):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_number_of_facets(self)

    def number_of_edges(self):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_number_of_edges(self)

    def number_of_finite_cells(self):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_number_of_finite_cells(self)

    def number_of_finite_facets(self):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_number_of_finite_facets(self)

    def number_of_finite_edges(self):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_number_of_finite_edges(self)

    def is_infinite(self, *args):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_is_infinite(self, *args)

    def is_vertex(self, c):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_is_vertex(self, c)

    def has_vertex(self, *args):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_has_vertex(self, *args)

    def are_equal(self, *args):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_are_equal(self, *args)

    def locate(self, *args):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_locate(self, *args)

    def side_of_cell(self, p, c, lt, li, lj):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_side_of_cell(self, p, c, lt, li, lj)

    def side_of_facet(self, p, f, lt, li, lj):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_side_of_facet(self, p, f, lt, li, lj)

    def side_of_edge(self, *args):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_side_of_edge(self, *args)

    def flip(self, *args):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_flip(self, *args)

    def flip_flippable(self, *args):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_flip_flippable(self, *args)

    def insert(self, *args):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_insert(self, *args)

    def insert_in_cell(self, *args):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_insert_in_cell(self, *args)

    def insert_in_facet(self, *args):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_insert_in_facet(self, *args)

    def insert_in_edge(self, *args):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_insert_in_edge(self, *args)

    def insert_outside_convex_hull(self, *args):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_insert_outside_convex_hull(self, *args)

    def insert_outside_affine_hull(self, *args):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_insert_outside_affine_hull(self, *args)

    def finite_vertices(self):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_finite_vertices(self)

    def finite_edges(self):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_finite_edges(self)

    def finite_facets(self):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_finite_facets(self)

    def finite_cells(self):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_finite_cells(self)

    def all_vertices(self):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_all_vertices(self)

    def all_edges(self):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_all_edges(self)

    def all_facets(self):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_all_facets(self)

    def all_cells(self):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_all_cells(self)

    def points(self):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_points(self)

    def incident_cells(self, *args):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_incident_cells(self, *args)

    def finite_incident_cells(self, v, out):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_finite_incident_cells(self, v, out)

    def incident_facets(self, *args):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_incident_facets(self, *args)

    def finite_incident_facets(self, v, out):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_finite_incident_facets(self, v, out)

    def incident_edges(self, v, out):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_incident_edges(self, v, out)

    def finite_incident_edges(self, v, out):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_finite_incident_edges(self, v, out)

    def adjacent_vertices(self, v, out):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_adjacent_vertices(self, v, out)

    def finite_adjacent_vertices(self, v, out):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_finite_adjacent_vertices(self, v, out)

    def degree(self, c):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_degree(self, c)

    def mirror_index(self, c1, c2):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_mirror_index(self, c1, c2)

    def mirror_vertex(self, *args):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_mirror_vertex(self, *args)

    def mirror_facet(self, *args):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_mirror_facet(self, *args)

    def tetrahedron(self, *args):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_tetrahedron(self, *args)

    def triangle(self, *args):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_triangle(self, *args)

    def segment(self, *args):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_segment(self, *args)

    def point(self, *args):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_point(self, *args)

    def is_valid(self, *args):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_is_valid(self, *args)

    def __str__(self):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3___str__(self)

    def write_to_file(self, fname, prec=5):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_write_to_file(self, fname, prec)

    def read_from_file(self, fname):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_read_from_file(self, fname)

    def is_cell(self, *args):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_is_cell(self, *args)

    def equal(self, t):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_equal(self, t)

    def __eq__(self, p):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3___eq__(self, p)

    def __ne__(self, p):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3___ne__(self, p)

    def deepcopy(self, *args):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_deepcopy(self, *args)

    def same_internal_object(self, other):
        return _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_same_internal_object(self, other)
Internal_Triangulation_3_Surface_mesh_default_triangulation_3_swigregister = _CGAL_Surface_mesher.Internal_Triangulation_3_Surface_mesh_default_triangulation_3_swigregister
Internal_Triangulation_3_Surface_mesh_default_triangulation_3_swigregister(Internal_Triangulation_3_Surface_mesh_default_triangulation_3)

class Surface_mesh_default_triangulation_3_All_vertices_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Surface_mesh_default_triangulation_3_All_vertices_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Surface_mesh_default_triangulation_3_All_vertices_iterator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CGAL_Surface_mesher.new_Surface_mesh_default_triangulation_3_All_vertices_iterator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_vertices_iterator___iter__(self)

    def __next__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_vertices_iterator___next__(self)

    def next(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_vertices_iterator_next(self, *args)

    def deepcopy(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_vertices_iterator_deepcopy(self, *args)

    def hasNext(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_vertices_iterator_hasNext(self)

    def __eq__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_vertices_iterator___eq__(self, p)

    def __ne__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_vertices_iterator___ne__(self, p)
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Surface_mesh_default_triangulation_3_All_vertices_iterator
    __del__ = lambda self: None
Surface_mesh_default_triangulation_3_All_vertices_iterator_swigregister = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_vertices_iterator_swigregister
Surface_mesh_default_triangulation_3_All_vertices_iterator_swigregister(Surface_mesh_default_triangulation_3_All_vertices_iterator)

class Surface_mesh_default_triangulation_3_Finite_vertices_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Surface_mesh_default_triangulation_3_Finite_vertices_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Surface_mesh_default_triangulation_3_Finite_vertices_iterator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CGAL_Surface_mesher.new_Surface_mesh_default_triangulation_3_Finite_vertices_iterator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_vertices_iterator___iter__(self)

    def __next__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_vertices_iterator___next__(self)

    def next(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_vertices_iterator_next(self, *args)

    def deepcopy(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_vertices_iterator_deepcopy(self, *args)

    def hasNext(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_vertices_iterator_hasNext(self)

    def __eq__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_vertices_iterator___eq__(self, p)

    def __ne__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_vertices_iterator___ne__(self, p)
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Surface_mesh_default_triangulation_3_Finite_vertices_iterator
    __del__ = lambda self: None
Surface_mesh_default_triangulation_3_Finite_vertices_iterator_swigregister = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_vertices_iterator_swigregister
Surface_mesh_default_triangulation_3_Finite_vertices_iterator_swigregister(Surface_mesh_default_triangulation_3_Finite_vertices_iterator)

class Surface_mesh_default_triangulation_3_All_cells_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Surface_mesh_default_triangulation_3_All_cells_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Surface_mesh_default_triangulation_3_All_cells_iterator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CGAL_Surface_mesher.new_Surface_mesh_default_triangulation_3_All_cells_iterator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_cells_iterator___iter__(self)

    def __next__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_cells_iterator___next__(self)

    def next(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_cells_iterator_next(self, *args)

    def deepcopy(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_cells_iterator_deepcopy(self, *args)

    def hasNext(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_cells_iterator_hasNext(self)

    def __eq__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_cells_iterator___eq__(self, p)

    def __ne__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_cells_iterator___ne__(self, p)
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Surface_mesh_default_triangulation_3_All_cells_iterator
    __del__ = lambda self: None
Surface_mesh_default_triangulation_3_All_cells_iterator_swigregister = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_cells_iterator_swigregister
Surface_mesh_default_triangulation_3_All_cells_iterator_swigregister(Surface_mesh_default_triangulation_3_All_cells_iterator)

class Surface_mesh_default_triangulation_3_Finite_cells_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Surface_mesh_default_triangulation_3_Finite_cells_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Surface_mesh_default_triangulation_3_Finite_cells_iterator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CGAL_Surface_mesher.new_Surface_mesh_default_triangulation_3_Finite_cells_iterator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_cells_iterator___iter__(self)

    def __next__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_cells_iterator___next__(self)

    def next(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_cells_iterator_next(self, *args)

    def deepcopy(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_cells_iterator_deepcopy(self, *args)

    def hasNext(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_cells_iterator_hasNext(self)

    def __eq__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_cells_iterator___eq__(self, p)

    def __ne__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_cells_iterator___ne__(self, p)
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Surface_mesh_default_triangulation_3_Finite_cells_iterator
    __del__ = lambda self: None
Surface_mesh_default_triangulation_3_Finite_cells_iterator_swigregister = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_cells_iterator_swigregister
Surface_mesh_default_triangulation_3_Finite_cells_iterator_swigregister(Surface_mesh_default_triangulation_3_Finite_cells_iterator)

class Surface_mesh_default_triangulation_3_All_facets_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Surface_mesh_default_triangulation_3_All_facets_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Surface_mesh_default_triangulation_3_All_facets_iterator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CGAL_Surface_mesher.new_Surface_mesh_default_triangulation_3_All_facets_iterator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_facets_iterator___iter__(self)

    def __next__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_facets_iterator___next__(self)

    def next(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_facets_iterator_next(self, *args)

    def deepcopy(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_facets_iterator_deepcopy(self, *args)

    def hasNext(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_facets_iterator_hasNext(self)

    def __eq__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_facets_iterator___eq__(self, p)

    def __ne__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_facets_iterator___ne__(self, p)
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Surface_mesh_default_triangulation_3_All_facets_iterator
    __del__ = lambda self: None
Surface_mesh_default_triangulation_3_All_facets_iterator_swigregister = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_facets_iterator_swigregister
Surface_mesh_default_triangulation_3_All_facets_iterator_swigregister(Surface_mesh_default_triangulation_3_All_facets_iterator)

class Surface_mesh_default_triangulation_3_Finite_facets_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Surface_mesh_default_triangulation_3_Finite_facets_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Surface_mesh_default_triangulation_3_Finite_facets_iterator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CGAL_Surface_mesher.new_Surface_mesh_default_triangulation_3_Finite_facets_iterator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_facets_iterator___iter__(self)

    def __next__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_facets_iterator___next__(self)

    def next(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_facets_iterator_next(self, *args)

    def deepcopy(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_facets_iterator_deepcopy(self, *args)

    def hasNext(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_facets_iterator_hasNext(self)

    def __eq__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_facets_iterator___eq__(self, p)

    def __ne__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_facets_iterator___ne__(self, p)
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Surface_mesh_default_triangulation_3_Finite_facets_iterator
    __del__ = lambda self: None
Surface_mesh_default_triangulation_3_Finite_facets_iterator_swigregister = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_facets_iterator_swigregister
Surface_mesh_default_triangulation_3_Finite_facets_iterator_swigregister(Surface_mesh_default_triangulation_3_Finite_facets_iterator)

class Surface_mesh_default_triangulation_3_All_edges_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Surface_mesh_default_triangulation_3_All_edges_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Surface_mesh_default_triangulation_3_All_edges_iterator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CGAL_Surface_mesher.new_Surface_mesh_default_triangulation_3_All_edges_iterator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_edges_iterator___iter__(self)

    def __next__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_edges_iterator___next__(self)

    def next(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_edges_iterator_next(self, *args)

    def deepcopy(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_edges_iterator_deepcopy(self, *args)

    def hasNext(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_edges_iterator_hasNext(self)

    def __eq__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_edges_iterator___eq__(self, p)

    def __ne__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_edges_iterator___ne__(self, p)
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Surface_mesh_default_triangulation_3_All_edges_iterator
    __del__ = lambda self: None
Surface_mesh_default_triangulation_3_All_edges_iterator_swigregister = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_All_edges_iterator_swigregister
Surface_mesh_default_triangulation_3_All_edges_iterator_swigregister(Surface_mesh_default_triangulation_3_All_edges_iterator)

class Surface_mesh_default_triangulation_3_Finite_edges_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Surface_mesh_default_triangulation_3_Finite_edges_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Surface_mesh_default_triangulation_3_Finite_edges_iterator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CGAL_Surface_mesher.new_Surface_mesh_default_triangulation_3_Finite_edges_iterator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_edges_iterator___iter__(self)

    def __next__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_edges_iterator___next__(self)

    def next(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_edges_iterator_next(self, *args)

    def deepcopy(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_edges_iterator_deepcopy(self, *args)

    def hasNext(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_edges_iterator_hasNext(self)

    def __eq__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_edges_iterator___eq__(self, p)

    def __ne__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_edges_iterator___ne__(self, p)
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Surface_mesh_default_triangulation_3_Finite_edges_iterator
    __del__ = lambda self: None
Surface_mesh_default_triangulation_3_Finite_edges_iterator_swigregister = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Finite_edges_iterator_swigregister
Surface_mesh_default_triangulation_3_Finite_edges_iterator_swigregister(Surface_mesh_default_triangulation_3_Finite_edges_iterator)

class Surface_mesh_default_triangulation_3_Point_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Surface_mesh_default_triangulation_3_Point_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Surface_mesh_default_triangulation_3_Point_iterator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CGAL_Surface_mesher.new_Surface_mesh_default_triangulation_3_Point_iterator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Point_iterator___iter__(self)

    def __next__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Point_iterator___next__(self)

    def next(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Point_iterator_next(self, *args)

    def deepcopy(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Point_iterator_deepcopy(self, *args)

    def hasNext(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Point_iterator_hasNext(self)

    def __eq__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Point_iterator___eq__(self, p)

    def __ne__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Point_iterator___ne__(self, p)
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Surface_mesh_default_triangulation_3_Point_iterator
    __del__ = lambda self: None
Surface_mesh_default_triangulation_3_Point_iterator_swigregister = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Point_iterator_swigregister
Surface_mesh_default_triangulation_3_Point_iterator_swigregister(Surface_mesh_default_triangulation_3_Point_iterator)

class Surface_mesh_default_triangulation_3_Cell_circulator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Surface_mesh_default_triangulation_3_Cell_circulator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Surface_mesh_default_triangulation_3_Cell_circulator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CGAL_Surface_mesher.new_Surface_mesh_default_triangulation_3_Cell_circulator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_circulator___iter__(self)

    def next(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_circulator_next(self)

    def deepcopy(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_circulator_deepcopy(self, *args)

    def prev(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_circulator_prev(self)

    def hasNext(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_circulator_hasNext(self)

    def __eq__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_circulator___eq__(self, p)

    def __ne__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_circulator___ne__(self, p)
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Surface_mesh_default_triangulation_3_Cell_circulator
    __del__ = lambda self: None
Surface_mesh_default_triangulation_3_Cell_circulator_swigregister = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Cell_circulator_swigregister
Surface_mesh_default_triangulation_3_Cell_circulator_swigregister(Surface_mesh_default_triangulation_3_Cell_circulator)

class Surface_mesh_default_triangulation_3_Facet_circulator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Surface_mesh_default_triangulation_3_Facet_circulator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Surface_mesh_default_triangulation_3_Facet_circulator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CGAL_Surface_mesher.new_Surface_mesh_default_triangulation_3_Facet_circulator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Facet_circulator___iter__(self)

    def next(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Facet_circulator_next(self)

    def deepcopy(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Facet_circulator_deepcopy(self, *args)

    def prev(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Facet_circulator_prev(self)

    def hasNext(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Facet_circulator_hasNext(self)

    def __eq__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Facet_circulator___eq__(self, p)

    def __ne__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Facet_circulator___ne__(self, p)
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Surface_mesh_default_triangulation_3_Facet_circulator
    __del__ = lambda self: None
Surface_mesh_default_triangulation_3_Facet_circulator_swigregister = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Facet_circulator_swigregister
Surface_mesh_default_triangulation_3_Facet_circulator_swigregister(Surface_mesh_default_triangulation_3_Facet_circulator)

class Surface_mesh_default_triangulation_3(Internal_Triangulation_3_Surface_mesh_default_triangulation_3):
    __swig_setmethods__ = {}
    for _s in [Internal_Triangulation_3_Surface_mesh_default_triangulation_3]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Surface_mesh_default_triangulation_3, name, value)
    __swig_getmethods__ = {}
    for _s in [Internal_Triangulation_3_Surface_mesh_default_triangulation_3]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Surface_mesh_default_triangulation_3, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CGAL_Surface_mesher.new_Surface_mesh_default_triangulation_3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def move(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_move(self, *args)

    def remove(self, c):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_remove(self, c)

    def side_of_sphere(self, c1, c2):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_side_of_sphere(self, c1, c2)

    def side_of_circle(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_side_of_circle(self, *args)

    def nearest_vertex(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_nearest_vertex(self, *args)

    def nearest_vertex_in_cell(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_nearest_vertex_in_cell(self, *args)

    def is_Gabriel(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_is_Gabriel(self, *args)

    def dual(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_dual(self, *args)

    def dual_support(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_dual_support(self, *args)

    def deepcopy(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_deepcopy(self, *args)
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Surface_mesh_default_triangulation_3
    __del__ = lambda self: None
Surface_mesh_default_triangulation_3_swigregister = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_swigregister
Surface_mesh_default_triangulation_3_swigregister(Surface_mesh_default_triangulation_3)

class Surface_mesher_Complex_2_in_triangulation_3_Vertex_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Surface_mesher_Complex_2_in_triangulation_3_Vertex_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Surface_mesher_Complex_2_in_triangulation_3_Vertex_iterator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CGAL_Surface_mesher.new_Surface_mesher_Complex_2_in_triangulation_3_Vertex_iterator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _CGAL_Surface_mesher.Surface_mesher_Complex_2_in_triangulation_3_Vertex_iterator___iter__(self)

    def __next__(self):
        return _CGAL_Surface_mesher.Surface_mesher_Complex_2_in_triangulation_3_Vertex_iterator___next__(self)

    def next(self, *args):
        return _CGAL_Surface_mesher.Surface_mesher_Complex_2_in_triangulation_3_Vertex_iterator_next(self, *args)

    def deepcopy(self, *args):
        return _CGAL_Surface_mesher.Surface_mesher_Complex_2_in_triangulation_3_Vertex_iterator_deepcopy(self, *args)

    def hasNext(self):
        return _CGAL_Surface_mesher.Surface_mesher_Complex_2_in_triangulation_3_Vertex_iterator_hasNext(self)

    def __eq__(self, p):
        return _CGAL_Surface_mesher.Surface_mesher_Complex_2_in_triangulation_3_Vertex_iterator___eq__(self, p)

    def __ne__(self, p):
        return _CGAL_Surface_mesher.Surface_mesher_Complex_2_in_triangulation_3_Vertex_iterator___ne__(self, p)
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Surface_mesher_Complex_2_in_triangulation_3_Vertex_iterator
    __del__ = lambda self: None
Surface_mesher_Complex_2_in_triangulation_3_Vertex_iterator_swigregister = _CGAL_Surface_mesher.Surface_mesher_Complex_2_in_triangulation_3_Vertex_iterator_swigregister
Surface_mesher_Complex_2_in_triangulation_3_Vertex_iterator_swigregister(Surface_mesher_Complex_2_in_triangulation_3_Vertex_iterator)

class Surface_mesh_default_triangulation_3_Facet_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Surface_mesh_default_triangulation_3_Facet_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Surface_mesh_default_triangulation_3_Facet_iterator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CGAL_Surface_mesher.new_Surface_mesh_default_triangulation_3_Facet_iterator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Facet_iterator___iter__(self)

    def __next__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Facet_iterator___next__(self)

    def next(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Facet_iterator_next(self, *args)

    def deepcopy(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Facet_iterator_deepcopy(self, *args)

    def hasNext(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Facet_iterator_hasNext(self)

    def __eq__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Facet_iterator___eq__(self, p)

    def __ne__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Facet_iterator___ne__(self, p)
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Surface_mesh_default_triangulation_3_Facet_iterator
    __del__ = lambda self: None
Surface_mesh_default_triangulation_3_Facet_iterator_swigregister = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Facet_iterator_swigregister
Surface_mesh_default_triangulation_3_Facet_iterator_swigregister(Surface_mesh_default_triangulation_3_Facet_iterator)

class Surface_mesh_default_triangulation_3_Edge_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Surface_mesh_default_triangulation_3_Edge_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Surface_mesh_default_triangulation_3_Edge_iterator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CGAL_Surface_mesher.new_Surface_mesh_default_triangulation_3_Edge_iterator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Edge_iterator___iter__(self)

    def __next__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Edge_iterator___next__(self)

    def next(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Edge_iterator_next(self, *args)

    def deepcopy(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Edge_iterator_deepcopy(self, *args)

    def hasNext(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Edge_iterator_hasNext(self)

    def __eq__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Edge_iterator___eq__(self, p)

    def __ne__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Edge_iterator___ne__(self, p)
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Surface_mesh_default_triangulation_3_Edge_iterator
    __del__ = lambda self: None
Surface_mesh_default_triangulation_3_Edge_iterator_swigregister = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Edge_iterator_swigregister
Surface_mesh_default_triangulation_3_Edge_iterator_swigregister(Surface_mesh_default_triangulation_3_Edge_iterator)

class Surface_mesh_default_triangulation_3_Boundary_edges_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Surface_mesh_default_triangulation_3_Boundary_edges_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Surface_mesh_default_triangulation_3_Boundary_edges_iterator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CGAL_Surface_mesher.new_Surface_mesh_default_triangulation_3_Boundary_edges_iterator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Boundary_edges_iterator___iter__(self)

    def __next__(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Boundary_edges_iterator___next__(self)

    def next(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Boundary_edges_iterator_next(self, *args)

    def deepcopy(self, *args):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Boundary_edges_iterator_deepcopy(self, *args)

    def hasNext(self):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Boundary_edges_iterator_hasNext(self)

    def __eq__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Boundary_edges_iterator___eq__(self, p)

    def __ne__(self, p):
        return _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Boundary_edges_iterator___ne__(self, p)
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Surface_mesh_default_triangulation_3_Boundary_edges_iterator
    __del__ = lambda self: None
Surface_mesh_default_triangulation_3_Boundary_edges_iterator_swigregister = _CGAL_Surface_mesher.Surface_mesh_default_triangulation_3_Boundary_edges_iterator_swigregister
Surface_mesh_default_triangulation_3_Boundary_edges_iterator_swigregister(Surface_mesh_default_triangulation_3_Boundary_edges_iterator)

class Complex_2_in_triangulation_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Complex_2_in_triangulation_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Complex_2_in_triangulation_3, name)
    __repr__ = _swig_repr

    def __init__(self, t3):
        this = _CGAL_Surface_mesher.new_Complex_2_in_triangulation_3(t3)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def triangulation(self):
        return _CGAL_Surface_mesher.Complex_2_in_triangulation_3_triangulation(self)

    def add_to_complex(self, *args):
        return _CGAL_Surface_mesher.Complex_2_in_triangulation_3_add_to_complex(self, *args)

    def remove_from_complex(self, *args):
        return _CGAL_Surface_mesher.Complex_2_in_triangulation_3_remove_from_complex(self, *args)

    def number_of_facets(self):
        return _CGAL_Surface_mesher.Complex_2_in_triangulation_3_number_of_facets(self)

    def face_status(self, *args):
        return _CGAL_Surface_mesher.Complex_2_in_triangulation_3_face_status(self, *args)

    def is_in_complex(self, *args):
        return _CGAL_Surface_mesher.Complex_2_in_triangulation_3_is_in_complex(self, *args)

    def is_regular_or_boundary_for_vertices(self, c):
        return _CGAL_Surface_mesher.Complex_2_in_triangulation_3_is_regular_or_boundary_for_vertices(self, c)

    def facets(self):
        return _CGAL_Surface_mesher.Complex_2_in_triangulation_3_facets(self)

    def edges(self):
        return _CGAL_Surface_mesher.Complex_2_in_triangulation_3_edges(self)

    def boundary_edges(self):
        return _CGAL_Surface_mesher.Complex_2_in_triangulation_3_boundary_edges(self)

    def vertices(self):
        return _CGAL_Surface_mesher.Complex_2_in_triangulation_3_vertices(self)

    def incident_facets(self, v, out):
        return _CGAL_Surface_mesher.Complex_2_in_triangulation_3_incident_facets(self, v, out)

    def neighbor(self, *args):
        return _CGAL_Surface_mesher.Complex_2_in_triangulation_3_neighbor(self, *args)
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Complex_2_in_triangulation_3
    __del__ = lambda self: None
Complex_2_in_triangulation_3_swigregister = _CGAL_Surface_mesher.Complex_2_in_triangulation_3_swigregister
Complex_2_in_triangulation_3_swigregister(Complex_2_in_triangulation_3)

class Surface_mesh_default_criteria_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Surface_mesh_default_criteria_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Surface_mesh_default_criteria_3, name)
    __repr__ = _swig_repr

    def __init__(self, angle_bound, radius_bound, distance_bound):
        this = _CGAL_Surface_mesher.new_Surface_mesh_default_criteria_3(angle_bound, radius_bound, distance_bound)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Surface_mesh_default_criteria_3
    __del__ = lambda self: None
Surface_mesh_default_criteria_3_swigregister = _CGAL_Surface_mesher.Surface_mesh_default_criteria_3_swigregister
Surface_mesh_default_criteria_3_swigregister(Surface_mesh_default_criteria_3)

class Gray_level_image_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gray_level_image_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Gray_level_image_3, name)
    __repr__ = _swig_repr

    def __init__(self, s, iso_value):
        this = _CGAL_Surface_mesher.new_Gray_level_image_3(s, iso_value)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Gray_level_image_3
    __del__ = lambda self: None
Gray_level_image_3_swigregister = _CGAL_Surface_mesher.Gray_level_image_3_swigregister
Gray_level_image_3_swigregister(Gray_level_image_3)

class Implicit_surface_Gray_level_image_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Implicit_surface_Gray_level_image_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Implicit_surface_Gray_level_image_3, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CGAL_Surface_mesher.new_Implicit_surface_Gray_level_image_3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CGAL_Surface_mesher.delete_Implicit_surface_Gray_level_image_3
    __del__ = lambda self: None
Implicit_surface_Gray_level_image_3_swigregister = _CGAL_Surface_mesher.Implicit_surface_Gray_level_image_3_swigregister
Implicit_surface_Gray_level_image_3_swigregister(Implicit_surface_Gray_level_image_3)


def output_surface_facets_to_off(s, c2t3):
    return _CGAL_Surface_mesher.output_surface_facets_to_off(s, c2t3)
output_surface_facets_to_off = _CGAL_Surface_mesher.output_surface_facets_to_off

def output_surface_facets_to_polyhedron(c2t3, poly):
    return _CGAL_Surface_mesher.output_surface_facets_to_polyhedron(c2t3, poly)
output_surface_facets_to_polyhedron = _CGAL_Surface_mesher.output_surface_facets_to_polyhedron

def make_surface_mesh(*args):
    return _CGAL_Surface_mesher.make_surface_mesh(*args)
make_surface_mesh = _CGAL_Surface_mesher.make_surface_mesh
# This file is compatible with both classic and new-style classes.


