# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_CGAL_Box_intersection_d')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_CGAL_Box_intersection_d')
    _CGAL_Box_intersection_d = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CGAL_Box_intersection_d', [dirname(__file__)])
        except ImportError:
            import _CGAL_Box_intersection_d
            return _CGAL_Box_intersection_d
        try:
            _mod = imp.load_module('_CGAL_Box_intersection_d', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _CGAL_Box_intersection_d = swig_import_helper()
    del swig_import_helper
else:
    import _CGAL_Box_intersection_d
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

import CGAL.CGAL_Kernel
class Pair_of_int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pair_of_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pair_of_int, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CGAL_Box_intersection_d.new_Pair_of_int(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _CGAL_Box_intersection_d.Pair_of_int_first_set
    __swig_getmethods__["first"] = _CGAL_Box_intersection_d.Pair_of_int_first_get
    if _newclass:
        first = _swig_property(_CGAL_Box_intersection_d.Pair_of_int_first_get, _CGAL_Box_intersection_d.Pair_of_int_first_set)
    __swig_setmethods__["second"] = _CGAL_Box_intersection_d.Pair_of_int_second_set
    __swig_getmethods__["second"] = _CGAL_Box_intersection_d.Pair_of_int_second_get
    if _newclass:
        second = _swig_property(_CGAL_Box_intersection_d.Pair_of_int_second_get, _CGAL_Box_intersection_d.Pair_of_int_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _CGAL_Box_intersection_d.delete_Pair_of_int
    __del__ = lambda self: None
Pair_of_int_swigregister = _CGAL_Box_intersection_d.Pair_of_int_swigregister
Pair_of_int_swigregister(Pair_of_int)

class Ids_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ids_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ids_iterator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CGAL_Box_intersection_d.new_Ids_iterator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _CGAL_Box_intersection_d.Ids_iterator___iter__(self)

    def __next__(self):
        return _CGAL_Box_intersection_d.Ids_iterator___next__(self)

    def next(self, *args):
        return _CGAL_Box_intersection_d.Ids_iterator_next(self, *args)

    def deepcopy(self, *args):
        return _CGAL_Box_intersection_d.Ids_iterator_deepcopy(self, *args)

    def hasNext(self):
        return _CGAL_Box_intersection_d.Ids_iterator_hasNext(self)

    def __eq__(self, p):
        return _CGAL_Box_intersection_d.Ids_iterator___eq__(self, p)

    def __ne__(self, p):
        return _CGAL_Box_intersection_d.Ids_iterator___ne__(self, p)
    __swig_destroy__ = _CGAL_Box_intersection_d.delete_Ids_iterator
    __del__ = lambda self: None
Ids_iterator_swigregister = _CGAL_Box_intersection_d.Ids_iterator_swigregister
Ids_iterator_swigregister(Ids_iterator)

class Box_for_segment_polyline_2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Box_for_segment_polyline_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Box_for_segment_polyline_2, name)
    __repr__ = _swig_repr

    def __init__(self, s, polyline_id, id):
        this = _CGAL_Box_intersection_d.new_Box_for_segment_polyline_2(s, polyline_id, id)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CGAL_Box_intersection_d.delete_Box_for_segment_polyline_2
    __del__ = lambda self: None
Box_for_segment_polyline_2_swigregister = _CGAL_Box_intersection_d.Box_for_segment_polyline_2_swigregister
Box_for_segment_polyline_2_swigregister(Box_for_segment_polyline_2)

class Box_with_id_2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Box_with_id_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Box_with_id_2, name)
    __repr__ = _swig_repr

    def __init__(self, bbox, id):
        this = _CGAL_Box_intersection_d.new_Box_with_id_2(bbox, id)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CGAL_Box_intersection_d.delete_Box_with_id_2
    __del__ = lambda self: None
Box_with_id_2_swigregister = _CGAL_Box_intersection_d.Box_with_id_2_swigregister
Box_with_id_2_swigregister(Box_with_id_2)

class Box_with_id_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Box_with_id_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Box_with_id_3, name)
    __repr__ = _swig_repr

    def __init__(self, bbox, id):
        this = _CGAL_Box_intersection_d.new_Box_with_id_3(bbox, id)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CGAL_Box_intersection_d.delete_Box_with_id_3
    __del__ = lambda self: None
Box_with_id_3_swigregister = _CGAL_Box_intersection_d.Box_with_id_3_swigregister
Box_with_id_3_swigregister(Box_with_id_3)

COMPLETE = _CGAL_Box_intersection_d.COMPLETE
BIPARTITE = _CGAL_Box_intersection_d.BIPARTITE
HALF_OPEN = _CGAL_Box_intersection_d.HALF_OPEN
CLOSED = _CGAL_Box_intersection_d.CLOSED
class Collect_ids_callback_2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Collect_ids_callback_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Collect_ids_callback_2, name)
    __repr__ = _swig_repr

    def ids(self):
        return _CGAL_Box_intersection_d.Collect_ids_callback_2_ids(self)

    def __init__(self):
        this = _CGAL_Box_intersection_d.new_Collect_ids_callback_2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CGAL_Box_intersection_d.delete_Collect_ids_callback_2
    __del__ = lambda self: None
Collect_ids_callback_2_swigregister = _CGAL_Box_intersection_d.Collect_ids_callback_2_swigregister
Collect_ids_callback_2_swigregister(Collect_ids_callback_2)

class Collect_ids_callback_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Collect_ids_callback_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Collect_ids_callback_3, name)
    __repr__ = _swig_repr

    def ids(self):
        return _CGAL_Box_intersection_d.Collect_ids_callback_3_ids(self)

    def __init__(self):
        this = _CGAL_Box_intersection_d.new_Collect_ids_callback_3()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CGAL_Box_intersection_d.delete_Collect_ids_callback_3
    __del__ = lambda self: None
Collect_ids_callback_3_swigregister = _CGAL_Box_intersection_d.Collect_ids_callback_3_swigregister
Collect_ids_callback_3_swigregister(Collect_ids_callback_3)


def box_intersection_d(*args):
    return _CGAL_Box_intersection_d.box_intersection_d(*args)
box_intersection_d = _CGAL_Box_intersection_d.box_intersection_d

def box_intersection_all_pairs_d(*args):
    return _CGAL_Box_intersection_d.box_intersection_all_pairs_d(*args)
box_intersection_all_pairs_d = _CGAL_Box_intersection_d.box_intersection_all_pairs_d

def box_self_intersection_d(*args):
    return _CGAL_Box_intersection_d.box_self_intersection_d(*args)
box_self_intersection_d = _CGAL_Box_intersection_d.box_self_intersection_d

def box_self_intersection_all_pairs_d(*args):
    return _CGAL_Box_intersection_d.box_self_intersection_all_pairs_d(*args)
box_self_intersection_all_pairs_d = _CGAL_Box_intersection_d.box_self_intersection_all_pairs_d
# This file is compatible with both classic and new-style classes.


